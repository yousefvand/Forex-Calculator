name: Build and Release Forex Calculator

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

permissions:
  contents: write  # Required for creating releases and uploading artifacts

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_extension: tar.gz
          - os: macos-latest
            artifact_extension: zip
          - os: windows-latest
            artifact_extension: zip

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    # ---------------------------
    # Ubuntu Section (Dynamic Qt)
    # ---------------------------
    - name: Install Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y ninja-build build-essential libgl1-mesa-dev libglu1-mesa-dev rsync \
          qt6-base-dev qt6-tools-dev qt6-tools-dev-tools qt6-l10n-tools qt6-declarative-dev \
          qt6-multimedia-dev cmake patchelf libpcre3 libpcre3-dev
      shell: bash

    - name: Configure CMake (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -G "Ninja" -S "${{ github.workspace }}"
      shell: bash

    - name: Build Forex-Calculator (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: cmake --build build
      shell: bash

    - name: Bundle Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p package
        cp build/Forex-Calculator package/
        
        # Bundle shared dependencies
        for lib in $(ldd package/Forex-Calculator | awk '{print $3}' | grep -v 'not'); do
          cp -v "$lib" package/
        done

        # Explicitly handle libpcre.so.3
        if [ ! -f "package/libpcre.so.3" ]; then
          if [ -f /usr/lib/x86_64-linux-gnu/libpcre.so.3 ]; then
            cp /usr/lib/x86_64-linux-gnu/libpcre.so.3 package/
          elif [ -f /usr/lib/x86_64-linux-gnu/libpcre.so ]; then
            cp /usr/lib/x86_64-linux-gnu/libpcre.so package/libpcre.so.3
          else
            echo "Error: libpcre.so.3 not found!"
            exit 1
          fi
        fi

        # Set the rpath to current directory for dependencies
        patchelf --set-rpath '$ORIGIN' package/Forex-Calculator

        # Package the application
        tar -czvf Forex-Calculator_ubuntu.tar.gz -C package .
      shell: bash

    - name: Upload Artifact (Ubuntu)
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_ubuntu
        path: Forex-Calculator_ubuntu.tar.gz

    # ---------------------------
    # macOS Section
    # ---------------------------
    - name: Install Dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ninja qt cmake
      shell: bash

    - name: Configure CMake (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -G "Ninja" -S "${{ github.workspace }}"
      shell: bash

    - name: Build Forex-Calculator (macOS)
      if: matrix.os == 'macos-latest'
      run: cmake --build build
      shell: bash

    - name: Package Forex-Calculator (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p package
        cp -R build/Forex-Calculator.app package/
        macdeployqt package/Forex-Calculator.app -dmg
        mv package/*.dmg Forex-Calculator_macos.dmg
      shell: bash

    - name: Upload Artifact (macOS)
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_macos
        path: Forex-Calculator_macos.dmg

    # ---------------------------
    # Windows Section
    # ---------------------------
    - name: Install Dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install ninja cmake mingw
      shell: cmd

    - name: Install Qt (Windows)
      if: matrix.os == 'windows-latest'
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.5.3'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_mingw'

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -G Ninja -S "%GITHUB_WORKSPACE%"
      shell: cmd

    - name: Build Forex-Calculator (Windows)
      if: matrix.os == 'windows-latest'
      run: cmake --build build
      shell: cmd

    - name: Package Forex-Calculator (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir package
        copy build\Forex-Calculator.exe package\
        windeployqt.exe package\Forex-Calculator.exe
        Compress-Archive -Path package -DestinationPath Forex-Calculator_windows.zip
      shell: pwsh

    - name: Upload Artifact (Windows)
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_windows
        path: Forex-Calculator_windows.zip

  # ---------------------------
  # Publish Section
  # ---------------------------
  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        merge-multiple: true

    - name: Generate Release Tag
      run: echo "RELEASE_TAG=release-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        release_name: Forex-Calculator ${{ env.RELEASE_TAG }}
        draft: false
        prerelease: false
        files: artifacts/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
