name: Build and Release Forex Calculator

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-latest, windows-latest]
        include:
          - os: ubuntu-22.04
            artifact_extension: AppImage
          - os: macos-latest
            artifact_extension: dmg
          - os: windows-latest
            artifact_extension: zip

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # ---------------------------
    # Ubuntu Section (AppImage)
    # ---------------------------
    - name: Build in Docker (Ubuntu 20.04)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace ubuntu:20.04 /bin/bash -c "
        apt update && apt install -y ninja-build cmake patchelf fuse libfuse2 libxkbcommon-x11-0 \
        libgl1-mesa-dev libglu1-mesa-dev libglib2.0-dev wget curl build-essential \
        xcb tzdata python3 python3-pip x11-xserver-utils \
        libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 \
        libxcb-render-util0 libxcb-shape0 libxcb-xfixes0 libxcb-xinerama0 \
        libxcb-sync1 libxcb-xkb1 && \
        pip3 install aqtinstall && \
        aqt install-qt linux desktop 6.6.0 gcc_64 -O /opt/Qt && \
        echo '/opt/Qt/6.6.0/gcc_64/bin' >> /etc/environment && \
        export Qt6_DIR='/opt/Qt/6.6.0/gcc_64/lib/cmake' && \
        cmake -B build -DCMAKE_BUILD_TYPE=Release -G 'Ninja' && \
        cmake --build build && \
        mkdir -p package && \
        cp build/Forex-Calculator package/ && \
        wget -c https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage && \
        chmod +x linuxdeployqt-continuous-x86_64.AppImage && \
        ./linuxdeployqt-continuous-x86_64.AppImage package/Forex-Calculator -appimage -bundle-non-qt-libs && \
        mv Forex-Calculator*.AppImage Forex-Calculator.AppImage
        "

    - name: Upload Ubuntu Artifact
      if: matrix.os == 'ubuntu-22.04'
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_Ubuntu
        path: Forex-Calculator.AppImage

    # ---------------------------
    # macOS Section
    # ---------------------------
    - name: Install Dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install ninja qt cmake

    - name: Build with CMake (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -G "Ninja"
        cmake --build build

    - name: Package as DMG (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p package
        cp -R build/Forex-Calculator.app package/
        macdeployqt package/Forex-Calculator.app -dmg
        mv package/*.dmg Forex-Calculator_macos.dmg

    - name: Upload macOS Artifact
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_macOS
        path: Forex-Calculator_macos.dmg

    # ---------------------------
    # Windows Section
    # ---------------------------
    - name: Install Dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install ninja cmake mingw
      shell: cmd

    - name: Install Qt6 (Windows)
      if: matrix.os == 'windows-latest'
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.6.0'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_mingw'

    - name: Build with CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -G Ninja
        cmake --build build
      shell: cmd

    - name: Package as ZIP (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir package
        cp build/Forex-Calculator.exe package/
        windeployqt.exe package/Forex-Calculator.exe
        Compress-Archive -Path package -DestinationPath Forex-Calculator_windows.zip
      shell: pwsh

    - name: Upload Windows Artifact
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_Windows
        path: Forex-Calculator_windows.zip

  # ---------------------------
  # Publish Section
  # ---------------------------
  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        merge-multiple: true

    - name: Generate Release Tag
      run: echo "RELEASE_TAG=release-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        release_name: Forex-Calculator ${{ env.RELEASE_TAG }}
        draft: false
        prerelease: false
        files: |
          artifacts/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
