name: Build and Release Forex Calculator

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_extension: tar.gz
          - os: macos-latest
            artifact_extension: zip
          - os: windows-latest
            artifact_extension: zip

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # --------- Linux Section ---------
    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y ninja-build \
            qt6-base-dev qt6-tools-dev qt6-tools-dev-tools \
            qt6-l10n-tools libgl1-mesa-dev libglu1-mesa-dev rsync cmake \
            patchelf fuse libfuse2 libxkbcommon-x11-0
        wget -c https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
        chmod +x linuxdeployqt-continuous-x86_64.AppImage
        sudo mv linuxdeployqt-continuous-x86_64.AppImage /usr/local/bin/linuxdeployqt
    - name: Configure CMake (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cmake -B "${{ github.workspace }}/build" \
          -DCMAKE_BUILD_TYPE=Release \
          -G "Ninja" \
          -S "${{ github.workspace }}"
    - name: Build Forex-Calculator (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: cmake --build "${{ github.workspace }}/build" --config Release

    - name: Package Forex-Calculator (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p package
        cp ${{ github.workspace }}/build/Forex-Calculator package/
        
        if ! linuxdeployqt package/Forex-Calculator -appimage -bundle-non-qt-libs; then
          echo "linuxdeployqt failed. Falling back to patchelf..."
          patchelf --set-rpath '$ORIGIN/' package/Forex-Calculator
        fi
        
        if [ -f Forex-Calculator*.AppImage ]; then
          mv Forex-Calculator*.AppImage package/Forex-Calculator.AppImage
        fi
        
        ldd package/Forex-Calculator | grep "=> /" | awk '{print $3}' | xargs -I '{}' cp -v '{}' package/ || true
        
        tar -czvf Forex-Calculator_ubuntu.tar.gz -C package .
        
    - name: Upload Linux Artifact
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_ubuntu
        path: Forex-Calculator_ubuntu.tar.gz

    # --------- macOS Section (Updated) ---------
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ninja qt cmake
    - name: Configure CMake (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cmake -B "${{ github.workspace }}/build" \
          -DCMAKE_BUILD_TYPE=Release \
          -G "Ninja" \
          -S "${{ github.workspace }}"
    - name: Build Forex-Calculator (macOS)
      if: matrix.os == 'macos-latest'
      run: cmake --build "${{ github.workspace }}/build" --config Release
    - name: Package Forex-Calculator (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p package
        cp -R build/Forex-Calculator.app package/
        macdeployqt package/Forex-Calculator.app -dmg
        mv package/*.dmg Forex-Calculator_macos.dmg
    - name: Upload macOS Artifact
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_macos
        path: "${{ github.workspace }}/Forex-Calculator_macos.dmg"

    # --------- Windows Section ---------
    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install ninja cmake mingw
      shell: cmd
    - name: Install Qt (Windows)
      if: matrix.os == 'windows-latest'
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.5.3'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_mingw'
    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cmake -B "${{ github.workspace }}\\build" ^
          -DCMAKE_BUILD_TYPE=Release ^
          -G Ninja ^
          -DCMAKE_PREFIX_PATH=D:\\a\\Forex-Calculator\\Qt\\6.5.3\\mingw_64 ^
          -S "${{ github.workspace }}"
      shell: cmd
    - name: Build Forex-Calculator (Windows)
      if: matrix.os == 'windows-latest'
      run: cmake --build "${{ github.workspace }}\\build" --config Release
      shell: cmd
    - name: Package Forex-Calculator (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir package
        cp build/Forex-Calculator.exe package/
        D:\a\Forex-Calculator\Qt\6.5.3\mingw_64\bin\windeployqt.exe package/Forex-Calculator.exe
        Compress-Archive -Path package -DestinationPath Forex-Calculator_windows.zip
      shell: pwsh
    - name: Upload Windows Artifact
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_windows
        path: Forex-Calculator_windows.zip

  # --------- Release Job ---------
  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        merge-multiple: true

    - name: Generate Release Tag
      id: tag
      run: echo "RELEASE_TAG=release-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        release_name: Forex-Calculator ${{ env.RELEASE_TAG }}
        draft: false
        prerelease: false
        files: |
          artifacts/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
