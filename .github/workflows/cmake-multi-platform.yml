name: Build and Package Qt Application

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  # ----------- Linux Build and Package -----------
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y ninja-build build-essential qt6-base-dev qt6-tools-dev-tools \
                              cmake libgl1-mesa-dev libglu1-mesa-dev mesa-common-dev libxkbcommon-dev
          curl -Lo linuxdeployqt https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
          chmod +x linuxdeployqt
          sudo mv linuxdeployqt /usr/local/bin/linuxdeployqt

      - name: Configure and Build
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release -G "Ninja"
          cmake --build build --config Release

      - name: Package (Linux)
        run: |
          mkdir -p package
          cp build/Forex-Calculator package/
          linuxdeployqt package/Forex-Calculator -appimage
          mv Forex-Calculator*.AppImage Forex-Calculator.AppImage
          zip -j Forex-Calculator_Linux.zip Forex-Calculator.AppImage

      - name: Upload Artifact (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: Forex-Calculator_Linux
          path: Forex-Calculator_Linux.zip

  # ----------- macOS Build and Package -----------
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: brew install ninja qt cmake

      - name: Configure and Build
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release -G "Ninja"
          cmake --build build --config Release

      - name: Package (macOS)
        run: |
          mkdir -p package
          cp -r build/Forex-Calculator.app package/
          macdeployqt package/Forex-Calculator.app -dmg
          zip -r Forex-Calculator_macOS.zip package/Forex-Calculator.app

      - name: Upload Artifact (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: Forex-Calculator_macOS
          path: Forex-Calculator_macOS.zip

  # ----------- Windows Build and Package -----------
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          choco install ninja cmake mingw
        shell: cmd

      - name: Install Qt (Windows)
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.5.3'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_mingw'

      - name: Configure and Build
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release ^
            -G Ninja ^
            -DCMAKE_PREFIX_PATH="D:\a\Forex-Calculator\Qt\6.5.3\mingw_64"
          cmake --build build --config Release
        shell: cmd

      - name: Package (Windows)
        run: |
          if (Test-Path "build/Forex-Calculator.exe") {
            mkdir package
            cp build/Forex-Calculator.exe package/
            D:\a\Forex-Calculator\Qt\6.5.3\mingw_64\bin\windeployqt.exe package/Forex-Calculator.exe
            Compress-Archive -Path package -DestinationPath Forex-Calculator_Windows.zip
          } else {
            echo "Build failed or executable not found!"
            exit 1
          }
        shell: pwsh

      - name: Upload Artifact (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: Forex-Calculator_Windows
          path: Forex-Calculator_Windows.zip

  # ----------- Create GitHub Release -----------
  release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List Downloaded Files
        run: ls -R artifacts

      - name: Generate Tag
        id: tag_name
        run: echo "RELEASE_TAG=release-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: Forex-Calculator Release
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifacts to Release
        run: |
          for file in $(find artifacts -type f); do
            gh release upload ${{ env.RELEASE_TAG }} "$file"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
