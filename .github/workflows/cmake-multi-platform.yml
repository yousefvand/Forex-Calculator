name: Build and Release Static Binaries

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

permissions:
  contents: write  # Required for creating releases and uploading artifacts

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_extension: tar.gz
          - os: macos-latest
            artifact_extension: zip
          - os: windows-latest
            artifact_extension: zip

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    # ---------------------------
    # Ubuntu Section (Static Qt)
    # ---------------------------
    - name: Cache APT Packages (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: ninja-build build-essential libgl1-mesa-dev libglu1-mesa-dev rsync libpcre3 \
          libx11-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev libx11-xcb-dev \
          libxcb-glx0-dev libxrandr-dev libxcb-randr0-dev libxcb-shm0-dev libxcb-xfixes0-dev \
          libxcb-shape0-dev libxcb-sync-dev libxkbcommon-dev libxkbcommon-x11-dev \
          libssl-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-util-dev libxcb-icccm4-dev \
          libxcb-render-util0-dev libxcb-xinerama0-dev libxcb-cursor-dev libpulse-dev \
          libasound2-dev gperf bison flex libdrm-dev mesa-common-dev perl python3
        version: 1.0

    - name: Install Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y ninja-build build-essential libgl1-mesa-dev libglu1-mesa-dev rsync libpcre3 \
          libx11-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev libx11-xcb-dev \
          libxcb-glx0-dev libxrandr-dev libxcb-randr0-dev libxcb-shm0-dev libxcb-xfixes0-dev \
          libxcb-shape0-dev libxcb-sync-dev libxkbcommon-dev libxkbcommon-x11-dev \
          libssl-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-util-dev libxcb-icccm4-dev \
          libxcb-render-util0-dev libxcb-xinerama0-dev libxcb-cursor-dev libpulse-dev \
          libasound2-dev gperf bison flex libdrm-dev mesa-common-dev perl python3

    - name: Cache Qt Build (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      id: cache-qt
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/qt-static
        key: qt-static-${{ runner.os }}-${{ hashFiles('qt5/qtbase/**') }}
        restore-keys: |
          qt-static-${{ runner.os }}-

    - name: Build Qt Static (Ubuntu)
      if: matrix.os == 'ubuntu-latest' && steps.cache-qt.outputs.cache-hit != 'true'
      run: |
        git clone https://code.qt.io/qt/qt5.git
        cd qt5
        git checkout v6.8.1
        ./init-repository
        mkdir build-static
        cd build-static
        ../configure -release -static -prefix ${{ github.workspace }}/qt-static -opensource -confirm-license \
        -nomake examples -nomake tests -skip qtwebengine -skip qt3d -skip qtmultimedia -skip qtspeech \
        -skip qtsensors -skip qtserialbus -skip qtopcua -openssl-linked --verbose
        make -j$(nproc)
        make install

    - name: Configure CMake (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release \
          -G "Ninja" \
          -DCMAKE_PREFIX_PATH="${{ github.workspace }}/qt-static" \
          -DBUILD_SHARED_LIBS=OFF \
          -S .

    - name: Build Forex-Calculator (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: cmake --build build --config Release

    - name: Package Forex-Calculator (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p artifacts
        tar -czvf artifacts/Forex-Calculator_ubuntu.tar.gz -C build .

    - name: Upload Artifact (Ubuntu)
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_ubuntu
        path: artifacts/Forex-Calculator_ubuntu.tar.gz

    # ---------------------------
    # macOS Section (Static Qt)
    # ---------------------------
    - name: Install Dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install ninja qt

    - name: Configure CMake (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release \
          -G "Ninja" \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_PREFIX_PATH="$(brew --prefix qt)" \
          -S .

    - name: Build Forex-Calculator (macOS)
      if: matrix.os == 'macos-latest'
      run: cmake --build build --config Release

    - name: Package Forex-Calculator (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p artifacts
        zip -r artifacts/Forex-Calculator_macos.zip build

    - name: Upload Artifact (macOS)
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_macos
        path: artifacts/Forex-Calculator_macos.zip

  # ---------------------------
  # Release Job (After Build)
  # ---------------------------
  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        merge-multiple: true

    - name: Generate Release Tag
      id: tag
      run: echo "RELEASE_TAG=release-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        release_name: Forex-Calculator ${{ env.RELEASE_TAG }}
        draft: false
        prerelease: false
        files: |
          artifacts/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
