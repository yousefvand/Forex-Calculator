name: Build and Release Forex Calculator

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  # ----------- Linux Build -----------
  build-linux:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install Dependencies (Linux)
      run: |
        sudo apt update
        sudo apt install -y ninja-build build-essential qt6-base-dev \
          libgl1-mesa-dev libglu1-mesa-dev rsync cmake patchelf qt6-tools-dev qt6-l10n-tools
          
    - name: Configure CMake (Linux)
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release \
          -G "Ninja" \
          -DCMAKE_PREFIX_PATH="/usr/lib/qt6" \
          -S .

    - name: Build Forex-Calculator (Linux)
      run: cmake --build build --config Release

    - name: Deploy with linuxdeployqt
      run: |
        mkdir -p package
        cp build/Forex-Calculator package/
        linuxdeployqt package/Forex-Calculator -bundle-non-qt-libs
      shell: bash

    - name: Package Linux Executable
      run: |
        mkdir artifacts
        tar -czvf artifacts/Forex-Calculator_Linux.tar.gz -C package .
      shell: bash

    - name: Upload Artifact (Linux)
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_Linux
        path: artifacts/Forex-Calculator_Linux.tar.gz

  # ----------- macOS Build -----------
  build-macos:
    runs-on: macos-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install Dependencies (macOS)
      run: brew install ninja qt cmake

    - name: Configure CMake (macOS)
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release -G "Ninja" -S .

    - name: Build Forex-Calculator (macOS)
      run: cmake --build build --config Release

    - name: Deploy macOS App Bundle
      run: |
        mkdir -p package/Forex-Calculator.app/Contents/MacOS
        cp build/Forex-Calculator package/Forex-Calculator.app/Contents/MacOS/
        macdeployqt package/Forex-Calculator.app -dmg
      shell: bash

    - name: Package macOS Executable
      run: |
        mkdir -p artifacts
        zip -r artifacts/Forex-Calculator_macOS.zip package/Forex-Calculator.app
      shell: bash

    - name: Upload Artifact (macOS)
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_macOS
        path: artifacts/Forex-Calculator_macOS.zip

  # ----------- Windows Build -----------
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install Dependencies (Windows)
      run: |
        choco install ninja cmake mingw
      shell: cmd

    - name: Install Qt (Windows)
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.5.3'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_mingw'

    - name: Configure CMake (Windows)
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release ^
          -G Ninja ^
          -DCMAKE_PREFIX_PATH="D:\a\Forex-Calculator\Qt\6.5.3\mingw_64" ^
          -S .
      shell: cmd

    - name: Build Forex-Calculator (Windows)
      run: cmake --build build --config Release
      shell: cmd

    - name: Deploy with windeployqt
      run: |
        mkdir -p package
        cp build/Forex-Calculator.exe package/
        D:\a\Forex-Calculator\Qt\6.5.3\mingw_64\bin\windeployqt.exe --release ^
          --no-compiler-runtime ^
          --no-network ^
          --dir package ^
          package/Forex-Calculator.exe
      shell: cmd

    - name: Package Windows Executable
      run: |
        mkdir -p artifacts
        Compress-Archive -Path package/* -DestinationPath artifacts/Forex-Calculator_Windows.zip
      shell: pwsh

    - name: Upload Artifact (Windows)
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_Windows
        path: artifacts/Forex-Calculator_Windows.zip

  # ----------- Release Job -----------
  release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows]
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: List Downloaded Files
      run: ls -R artifacts

    - name: Generate Tag Name
      id: tag_name
      run: echo "RELEASE_TAG=release-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        release_name: Forex-Calculator Release
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Artifacts to Release
      run: |
        for file in $(find artifacts -type f); do
          gh release upload ${{ env.RELEASE_TAG }} "$file"
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
