name: Build and Release Static Binaries

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install Dependencies (Ubuntu)
      run: |
        sudo apt update
        sudo apt install -y ninja-build build-essential libgl1-mesa-dev libglu1-mesa-dev rsync \
        clang-13 llvm-13 libclang-13-dev

    - name: Configure CMake (Ubuntu)
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release \
          -G "Ninja" \
          -S .

    - name: Build Forex-Calculator (Ubuntu)
      run: cmake --build build --config Release

    - name: Package Forex-Calculator (Ubuntu)
      run: |
        mkdir -p artifacts
        tar -czvf artifacts/Forex-Calculator_linux.tar.gz -C build .

    - name: Upload Artifact (Ubuntu)
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_linux
        path: artifacts/Forex-Calculator_linux.tar.gz

  release:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_extension: tar.gz
          - os: macos-latest
            artifact_extension: zip
          - os: windows-latest
            artifact_extension: zip
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install Dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y ninja-build build-essential libgl1-mesa-dev libglu1-mesa-dev rsync

    - name: Install Dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install ninja qt

    - name: Install Dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install ninja cmake mingw
      shell: cmd

    - name: Configure CMake
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release \
          -G "Ninja" \
          -S .

    - name: Build Forex-Calculator
      run: cmake --build build --config Release

    - name: Package Artifact
      run: |
        mkdir -p artifacts
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          tar -czvf artifacts/Forex-Calculator_linux.tar.gz -C build .
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          zip -r artifacts/Forex-Calculator_macos.zip build
        else
          Compress-Archive -Path "build/*" -DestinationPath "artifacts/Forex-Calculator_windows.zip"
        fi

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_${{ runner.os }}
        path: artifacts/*

    - name: Generate Tag Name
      id: tag_name
      run: echo "RELEASE_TAG=release-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        release_name: Forex-Calculator Release
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Artifacts to Release
      run: |
        for file in $(find artifacts -type f); do
          gh release upload ${{ env.RELEASE_TAG }} "$file"
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
