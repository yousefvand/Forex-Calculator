name: Build and Release Static Binaries

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  # ----------- Linux Build -----------
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Cache CMake Build
      uses: actions/cache@v3
      with:
        path: build
        key: cmake-build-${{ runner.os }}-${{ github.ref }}
        restore-keys: |
          cmake-build-${{ runner.os }}-

    - name: Install Docker
      run: |
        sudo apt update
        sudo apt install -y docker.io

    - name: Run Linux Build in Docker (Ubuntu 20.04)
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          ubuntu:20.04 \
          /bin/bash -c "
            apt update &&
            apt install -y wget curl ninja-build build-essential libgl1-mesa-dev libglu1-mesa-dev rsync &&
            
            # Download Qt Installer
            wget https://download.qt.io/official_releases/online_installers/qt-unified-linux-x64-online.run &&
            chmod +x qt-unified-linux-x64-online.run &&
            
            # Install dependencies for installer
            apt install -y libxcb-xinerama0 libxkbcommon-x11-0 libglib2.0-0 &&
            
            # Install Qt non-interactively
            ./qt-unified-linux-x64-online.run --script ./ci-qt-installer.qs &&
            
            export PATH=$HOME/Qt/6.5.3/gcc_64/bin:$PATH &&
            
            # Build Forex-Calculator
            cmake -B build -DCMAKE_BUILD_TYPE=Release -G 'Ninja' -S . &&
            cmake --build build --config Release &&
            
            # Package the AppImage
            wget https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage &&
            chmod +x linuxdeployqt-continuous-x86_64.AppImage &&
            ./linuxdeployqt-continuous-x86_64.AppImage build/Forex-Calculator -appimage &&
            
            mkdir -p artifacts &&
            mv Forex-Calculator*.AppImage artifacts/Forex-Calculator_linux.AppImage
          "
    
    - name: Upload Artifact (Linux)
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_linux
        path: artifacts/Forex-Calculator_linux.AppImage

  # ----------- macOS Build -----------
  build-macos:
    runs-on: macos-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Cache CMake Build
      uses: actions/cache@v3
      with:
        path: build
        key: cmake-build-${{ runner.os }}-${{ github.ref }}
        restore-keys: |
          cmake-build-${{ runner.os }}-

    - name: Install Dependencies (macOS)
      run: brew install ninja qt

    - name: Configure CMake (macOS)
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release \
          -G "Ninja" \
          -S .
    
    - name: Build Forex-Calculator (macOS)
      run: cmake --build build --config Release

    - name: Package Forex-Calculator (macOS)
      run: |
        mkdir -p artifacts
        zip -r artifacts/Forex-Calculator_macos.zip build

    - name: Upload Artifact (macOS)
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_macos
        path: artifacts/Forex-Calculator_macos.zip

  # ----------- Windows Build -----------
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Cache Qt Installation
      uses: actions/cache@v3
      with:
        path: D:\a\
        key: qt-install-${{ runner.os }}-${{ github.ref }}
        restore-keys: |
          qt-install-${{ runner.os }}-

    - name: Install Dependencies (Windows)
      run: |
        choco install ninja cmake mingw
      shell: cmd

    - name: Install Qt (Windows)
      if: steps.cache.outputs.cache-hit != 'true'
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.5.3'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_mingw'

    - name: Configure CMake (Windows)
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release ^
          -G Ninja ^
          -DCMAKE_EXE_LINKER_FLAGS="-static -static-libgcc -static-libstdc++" ^
          -S .
      shell: cmd

    - name: Build Forex-Calculator (Windows)
      run: cmake --build build --config Release
      shell: cmd

    - name: Deploy Qt DLLs (Windows)
      run: |
        $windeployqt = Get-ChildItem -Recurse -Filter windeployqt.exe "D:\a\" | Select-Object -First 1
        if ($windeployqt) {
          Write-Host "windeployqt found at: $($windeployqt.FullName)"
          & "$($windeployqt.FullName)" --dir build build\Forex-Calculator.exe
        } else {
          Write-Error "windeployqt.exe not found. Qt installation or PATH may be incorrect."
          exit 1
        }
      shell: pwsh
