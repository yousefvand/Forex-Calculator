name: Build and Release Forex Calculator

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_extension: AppImage
          - os: macos-latest
            artifact_extension: dmg
          - os: windows-latest
            artifact_extension: zip

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # ---------------------------
    # Ubuntu (AppImage)
    # ---------------------------
    - name: Set up Docker for AppImage (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          ubuntu:20.04 \
          bash -c "
          apt-get update && \
          apt-get install -y software-properties-common && \
          add-apt-repository ppa:qt6-team/qt6 && \
          apt-get update && \
          apt-get install -y qt6-base-dev qt6-tools-dev cmake ninja-build \
          qt6-multimedia-dev qt6-svg-dev qt6-declarative-dev qt6-shadertools-dev \
          libgl1-mesa-dev libglu1-mesa-dev rsync patchelf fuse libfuse2 && \
          wget -c https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage && \
          chmod +x linuxdeployqt-continuous-x86_64.AppImage && \
          mv linuxdeployqt-continuous-x86_64.AppImage /usr/local/bin/linuxdeployqt && \
          cmake -B build -DCMAKE_BUILD_TYPE=Release -G Ninja -S . && \
          cmake --build build --config Release && \
          mkdir -p package && \
          cp build/Forex-Calculator package/ && \
          linuxdeployqt package/Forex-Calculator -appimage -bundle-non-qt-libs && \
          mv Forex-Calculator*.AppImage Forex-Calculator.AppImage
          "

    - name: Upload Ubuntu Artifact (AppImage)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_Ubuntu
        path: Forex-Calculator.AppImage

    # ---------------------------
    # macOS
    # ---------------------------
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ninja qt cmake
    - name: Configure CMake (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -G "Ninja" -S "${{ github.workspace }}"
    - name: Build Forex-Calculator (macOS)
      if: matrix.os == 'macos-latest'
      run: cmake --build build --config Release
    - name: Package Forex-Calculator (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p package
        cp -R build/Forex-Calculator.app package/
        macdeployqt package/Forex-Calculator.app -dmg
        mv package/*.dmg Forex-Calculator_macos.dmg
    - name: Upload macOS Artifact
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_macos
        path: Forex-Calculator_macos.dmg

    # ---------------------------
    # Windows
    # ---------------------------
    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install ninja cmake mingw
      shell: cmd
    - name: Install Qt (Windows)
      if: matrix.os == 'windows-latest'
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.5.3'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_mingw'
    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -G Ninja -S "%GITHUB_WORKSPACE%"
      shell: cmd
    - name: Build Forex-Calculator (Windows)
      if: matrix.os == 'windows-latest'
      run: cmake --build build
      shell: cmd
    - name: Package Forex-Calculator (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir package
        copy build\Forex-Calculator.exe package\
        windeployqt.exe package\Forex-Calculator.exe
        Compress-Archive -Path package -DestinationPath Forex-Calculator_windows.zip
      shell: pwsh
    - name: Upload Artifact (Windows)
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_windows
        path: Forex-Calculator_windows.zip

    # ---------------------------
    # Publish Section
    # ---------------------------
  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        merge-multiple: true

    - name: Generate Release Tag
      run: echo "RELEASE_TAG=release-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        release_name: Forex-Calculator ${{ env.RELEASE_TAG }}
        draft: false
        prerelease: false
        files: artifacts/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
