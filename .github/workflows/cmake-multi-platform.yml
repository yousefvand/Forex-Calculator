name: Build and Release Static Binaries

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  # ----------- Linux Build (AppImage with Container) -----------
  build-linux:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04  # Compatible with glibc 2.31
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install Essential Tools and cmake
      run: |
        export DEBIAN_FRONTEND=noninteractive
        apt update
        apt install -y cmake curl wget ninja-build build-essential libgl1-mesa-dev libglu1-mesa-dev rsync \
        qt6-base-dev qt6-tools-dev qt6-tools-dev-tools qt6-l10n-tools libfuse2 || \
        echo "Some packages already installed"

    - name: Download and Setup linuxdeployqt
      run: |
        curl -Lo linuxdeployqt https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
        chmod +x linuxdeployqt
        mv linuxdeployqt /usr/local/bin/linuxdeployqt  # No sudo needed in container

    - name: Configure and Build (Linux)
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -G 'Ninja' -S .
        cmake --build build --config Release

    - name: Package AppImage (Linux)
      run: |
        mkdir -p artifacts
        if linuxdeployqt build/Forex-Calculator -appimage; then
          echo "AppImage created successfully."
          mv Forex-Calculator*.AppImage Forex-Calculator_Linux.AppImage
          zip -j artifacts/Forex-Calculator_Linux_App_Image.zip Forex-Calculator_Linux.AppImage
        else
          echo "AppImage creation failed!"
          exit 1
        fi

    - name: Upload Artifact (Linux)
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_Linux_App_Image
        path: artifacts/Forex-Calculator_Linux_App_Image.zip

  # ----------- macOS Build -----------
  build-macos:
    runs-on: macos-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install Dependencies (macOS)
      run: brew install ninja qt cmake

    - name: Configure and Build (macOS)
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -G "Ninja" -S .
        cmake --build build --config Release

    - name: Package Forex-Calculator (macOS)
      run: |
        mkdir -p artifacts
        zip -r artifacts/Forex-Calculator_macOS.zip build

    - name: Upload Artifact (macOS)
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_macOS
        path: artifacts/Forex-Calculator_macOS.zip

  # ----------- Windows Build (Static) -----------
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install Dependencies (Windows)
      run: |
        choco install ninja cmake mingw upx
      shell: cmd

    - name: Install Static Qt (Windows)
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.5.3'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_mingw'
        static: true

    - name: Configure CMake (Windows - Static)
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release ^
          -G Ninja ^
          -DCMAKE_EXE_LINKER_FLAGS="-static -static-libgcc -static-libstdc++ -static-libstdc++fs" ^
          -S .
      shell: cmd

    - name: Build Forex-Calculator (Windows - Static)
      run: cmake --build build --config Release
      shell: cmd

    - name: Package Single Executable (Windows)
      run: |
        mkdir -p artifacts
        cp build/Forex-Calculator.exe Forex-Calculator_Windows.exe
        upx --best Forex-Calculator_Windows.exe
        zip artifacts/Forex-Calculator_Windows.zip Forex-Calculator_Windows.exe
      shell: pwsh

    - name: Upload Artifact (Windows)
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_Windows
        path: artifacts/Forex-Calculator_Windows.zip

  # ----------- Release Job -----------
  release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows]
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Generate Tag Name
      id: tag_name
      run: echo "RELEASE_TAG=release-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        release_name: Forex-Calculator Release
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Artifacts to Release
      run: |
        for file in $(find artifacts -type f); do
          gh release upload ${{ env.RELEASE_TAG }} "$file"
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
