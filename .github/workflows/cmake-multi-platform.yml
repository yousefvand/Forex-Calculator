name: Build and Release Forex Calculator

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_extension: AppImage
          - os: macos-latest
            artifact_extension: dmg
          - os: windows-latest
            artifact_extension: zip

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    # ---------------------------
    # Ubuntu Section (AppImage)
    # ---------------------------
    - name: Install Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y ninja-build build-essential cmake libgl1-mesa-dev libglu1-mesa-dev rsync \
          libpcre3 libpcre3-dev patchelf wget fuse xz-utils libxcb-xinerama0 libx11-xcb1 \
          libfuse2 libxcb-render-util0 libxcb-keysyms1 libxcb-shape0

    - name: Install Qt6 (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        wget https://download.qt.io/official_releases/online_installers/qt-unified-linux-x64-online.run
        chmod +x qt-unified-linux-x64-online.run
        sudo apt install -y libxkbcommon-x11-0 libxcb1 libxcb-keysyms1 libxcb-image0 libxcb-render0 libxcb-xinerama0 libxcb-icccm4 libxcb-shape0
        xvfb-run sudo ./qt-unified-linux-x64-online.run --script qt-noninteractive.qs || xvfb-run sudo ./qt-unified-linux-x64-online.run --no-sandbox --script qt-noninteractive.qs
        echo "/opt/Qt/6.6.0/gcc_64/bin" >> $GITHUB_PATH
        export Qt6_DIR="/opt/Qt/6.6.0/gcc_64/lib/cmake"

    - name: Build AppImage (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          ubuntu:20.04 bash -c "
            apt update &&
            apt install -y ninja-build build-essential cmake libgl1-mesa-dev libglu1-mesa-dev rsync \
            libpcre3 libpcre3-dev patchelf wget fuse &&
            wget -c https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage &&
            chmod +x linuxdeployqt-continuous-x86_64.AppImage &&
            cmake -B build -DCMAKE_BUILD_TYPE=Release -G Ninja -S . &&
            cmake --build build &&
            mkdir -p package artifacts &&
            cp build/Forex-Calculator package/ &&
            ./linuxdeployqt-continuous-x86_64.AppImage package/Forex-Calculator -appimage -bundle-non-qt-libs &&
            mv Forex-Calculator*.AppImage artifacts/Forex-Calculator.AppImage
          "

    - name: Upload Artifact (Ubuntu)
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_AppImage
        path: artifacts/Forex-Calculator.AppImage

    # ---------------------------
    # macOS Section
    # ---------------------------
    - name: Install Dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ninja qt cmake

    - name: Configure CMake (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -G "Ninja" -S "${{ github.workspace }}"

    - name: Build Forex-Calculator (macOS)
      if: matrix.os == 'macos-latest'
      run: cmake --build build

    - name: Package Forex-Calculator (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p package
        cp -R build/Forex-Calculator.app package/
        /usr/local/opt/qt/bin/macdeployqt package/Forex-Calculator.app -dmg
        mv package/*.dmg Forex-Calculator_macos.dmg

    - name: Upload Artifact (macOS)
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_macos
        path: Forex-Calculator_macos.dmg

    # ---------------------------
    # Windows Section
    # ---------------------------
    - name: Install Dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install ninja cmake mingw
      shell: cmd

    - name: Install Qt (Windows)
      if: matrix.os == 'windows-latest'
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.5.3'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_mingw'

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -G Ninja -S "${{ github.workspace }}"
      shell: cmd

    - name: Build Forex-Calculator (Windows)
      if: matrix.os == 'windows-latest'
      run: cmake --build build
      shell: cmd

    - name: Package Forex-Calculator (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir package
        copy build\Forex-Calculator.exe package\
        windeployqt.exe package\Forex-Calculator.exe
        Compress-Archive -Path package -DestinationPath Forex-Calculator_windows.zip
      shell: pwsh

    - name: Upload Artifact (Windows)
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_windows
        path: Forex-Calculator_windows.zip

  # ---------------------------
  # Publish Section
  # ---------------------------
  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        merge-multiple: true

    - name: Generate Release Tag
      run: echo "RELEASE_TAG=release-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        release_name: Forex-Calculator ${{ env.RELEASE_TAG }}
        draft: false
        prerelease: false
        files: artifacts/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
