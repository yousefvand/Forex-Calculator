name: Build and Release Forex-Calculator

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  build-linux:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Cache Dependencies (Qt and linuxdeployqt)
      uses: actions/cache@v4
      with:
        path: |
          /opt/Qt
          ~/.cache/linuxdeployqt
        key: qt-cache-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: qt-cache-${{ runner.os }}-

    - name: Install System Dependencies
      run: |
        sudo apt update
        sudo apt install -y ninja-build build-essential libgl1-mesa-dev libglu1-mesa-dev rsync \
                            cmake fuse libfuse2 wget curl zip

    - name: Install Qt (if not cached)
      run: |
        if [ ! -d "/opt/Qt/6.5.3/gcc_64" ]; then
          curl -Lo qt-installer.run https://download.qt.io/official_releases/online_installers/qt-unified-linux-x64-online.run
          chmod +x qt-installer.run
          ./qt-installer.run --script qt_installer_script.qs
        fi

    - name: Download and Cache linuxdeployqt
      run: |
        if [ ! -f "~/.cache/linuxdeployqt/linuxdeployqt" ]; then
          wget https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
          chmod +x linuxdeployqt-continuous-x86_64.AppImage
          mkdir -p ~/.cache/linuxdeployqt
          mv linuxdeployqt-continuous-x86_64.AppImage ~/.cache/linuxdeployqt/linuxdeployqt
        fi
        sudo cp ~/.cache/linuxdeployqt/linuxdeployqt /usr/local/bin/linuxdeployqt

    - name: Configure CMake (Linux)
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release -G "Ninja" -S .

    - name: Build Forex-Calculator (Linux)
      run: cmake --build build --parallel $(nproc)

    - name: Strip Binary to Reduce Size
      run: strip build/Forex-Calculator

    - name: Package AppImage (Linux)
      run: |
        mkdir -p artifacts
        if linuxdeployqt build/Forex-Calculator -appimage; then
          echo "AppImage created successfully."
          mv Forex-Calculator*.AppImage Forex-Calculator_Linux.AppImage
          zip -j artifacts/Forex-Calculator.App.Image.zip Forex-Calculator_Linux.AppImage
        else
          echo "AppImage creation failed!"
          exit 1
        fi
    
    - name: Upload Artifact (Linux)
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_Linux
        path: artifacts/Forex-Calculator.App.Image.zip

  build-macos:
    runs-on: macos-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install Dependencies (macOS)
      run: brew install ninja qt

    - name: Configure CMake (macOS)
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release -G "Ninja" -S .

    - name: Build Forex-Calculator (macOS)
      run: cmake --build build --config Release --parallel $(sysctl -n hw.ncpu)

    - name: Package Forex-Calculator (macOS)
      run: |
        mkdir -p artifacts
        zip -r artifacts/Forex-Calculator_macOS.zip build

    - name: Upload Artifact (macOS)
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_macOS
        path: artifacts/Forex-Calculator_macOS.zip

  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install Dependencies (Windows)
      run: |
        choco install ninja cmake mingw upx
      shell: cmd

    - name: Install Qt (Windows)
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.5.3'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_mingw'
        modules: qtbase qttools

    - name: Configure CMake (Windows)
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release ^
          -G Ninja ^
          -DCMAKE_EXE_LINKER_FLAGS="-static -static-libgcc -static-libstdc++" ^
          -S .
      shell: cmd

    - name: Build Forex-Calculator (Windows)
      run: cmake --build build --config Release
      shell: cmd

    - name: Package Executable (Windows)
      run: |
        mkdir -p artifacts
        cp build/Forex-Calculator.exe Forex-Calculator_Windows.exe
        upx --best Forex-Calculator_Windows.exe
        powershell Compress-Archive -Path Forex-Calculator_Windows.exe -DestinationPath artifacts/Forex-Calculator_Windows.zip
      shell: pwsh

    - name: Upload Artifact (Windows)
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_Windows
        path: artifacts/Forex-Calculator_Windows.zip

  release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows]
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Generate Tag Name
      id: tag_name
      run: echo "RELEASE_TAG=release-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        release_name: Forex-Calculator Release
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Artifacts to Release
      run: |
        for file in $(find artifacts -type f); do
          gh release upload ${{ env.RELEASE_TAG }} "$file"
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
