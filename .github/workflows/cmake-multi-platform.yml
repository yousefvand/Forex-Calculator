name: Build and Release Forex Calculator

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_extension: AppImage
          - os: macos-latest
            artifact_extension: zip
          - os: windows-latest
            artifact_extension: zip

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    # ---------------------------
    # Linux Section (AppImage)
    # ---------------------------
    - name: Install Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y ninja-build build-essential cmake libgl1-mesa-dev libglu1-mesa-dev rsync \
          qt6-base-dev qt6-tools-dev qt6-tools-dev-tools qt6-l10n-tools qt6-declarative-dev \
          qt6-multimedia-dev libpcre3 libpcre3-dev patchelf curl imagemagick fonts-dejavu

    - name: Download AppImageTool (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        curl -Lo appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool
        sudo mv appimagetool /usr/local/bin/

    - name: Configure CMake (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -G "Ninja" -S "${{ github.workspace }}"

    - name: Build Forex-Calculator (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: cmake --build build

    - name: Package Forex-Calculator as AppImage (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p AppDir/usr/bin
        cp build/Forex-Calculator AppDir/usr/bin/
        
        # Bundle dependencies using ldd
        mkdir -p AppDir/usr/lib/
        for lib in $(ldd build/Forex-Calculator | awk '{print $3}' | grep -v 'not'); do
          cp -v "$lib" AppDir/usr/lib/ || true
        done
        
        # Copy additional required libraries
        cp -v /lib/x86_64-linux-gnu/libpcre.so.3 AppDir/usr/lib/ || true

        # Create AppImage desktop entry
        mkdir -p AppDir/usr/share/applications
        cat <<EOF > AppDir/usr/share/applications/forex-calculator.desktop
        [Desktop Entry]
        Name=Forex Calculator
        Exec=Forex-Calculator
        Icon=forex-calculator
        Type=Application
        Categories=Utility;
        EOF

        # Handle missing icon gracefully
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        if [ -f assets/icons/forex-calculator.png ]; then
          cp assets/icons/forex-calculator.png AppDir/usr/share/icons/hicolor/256x256/apps/forex-calculator.png
        else
          echo "Icon not found. Creating a placeholder icon."
          convert -size 256x256 xc:white -fill black -font DejaVu-Sans -gravity center -pointsize 72 -draw "text 0,0 'FX'" AppDir/usr/share/icons/hicolor/256x256/apps/forex-calculator.png
        fi

        # Generate AppRun script
        cat <<EOF > AppDir/AppRun
        #!/bin/bash
        exec "\$(dirname "\$0")/usr/bin/Forex-Calculator" "\$@"
        EOF
        chmod +x AppDir/AppRun

        # Build the AppImage
        appimagetool AppDir Forex-Calculator.AppImage
        mv Forex-Calculator.AppImage artifacts/

    - name: Upload AppImage Artifact (Ubuntu)
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_ubuntu
        path: artifacts/Forex-Calculator.AppImage

    # ---------------------------
    # macOS Section
    # ---------------------------
    - name: Install Dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ninja qt cmake

    - name: Configure CMake (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -G "Ninja" -S "${{ github.workspace }}"

    - name: Build Forex-Calculator (macOS)
      if: matrix.os == 'macos-latest'
      run: cmake --build build

    - name: Package Forex-Calculator (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p package
        cp -R build/Forex-Calculator.app package/
        macdeployqt package/Forex-Calculator.app -dmg
        mv package/*.dmg Forex-Calculator_macos.dmg

    - name: Upload Artifact (macOS)
      uses: actions/upload-artifact@v4
      with:
        name: Forex-Calculator_macos
        path: Forex-Calculator_macos.dmg

    # ---------------------------
    # Windows Section
    # ---------------------------
    - name: Install Dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install ninja cmake mingw
      shell: cmd

    - name: Install Qt (Windows)
      if: matrix.os == 'windows-latest'
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.5.3'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_mingw'

    # ---------------------------
    # Publish Section
    # ---------------------------
    release:
      runs-on: ubuntu-latest
      needs: build
      steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Generate Release Tag
        run: echo "RELEASE_TAG=release-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: Forex-Calculator ${{ env.RELEASE_TAG }}
          draft: false
          prerelease: false
          files: artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
